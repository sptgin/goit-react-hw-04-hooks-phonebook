{"version":3,"sources":["components/Section.js","components/ContactForm.js","components/Filter.js","components/ContactListItem.js","components/ContactsList.js","App.js","index.js"],"names":["Section","title","children","className","ContactForm","nameId","uuid","numberId","state","name","number","formChange","event","currentTarget","value","setState","formSubmit","preventDefault","contact","id","props","onSubmit","formReset","this","htmlFor","type","pattern","required","onChange","Component","PropsType","func","isRequired","Filter","ContactListItem","onDeleteContact","onClick","prototype","PropTypes","string","ContactsList","findContact","map","App","contacts","filter","getChange","addContact","checkContact","alert","find","toLocaleLowerCase","normalizedFilter","length","toLowerCase","includes","deleteContact","contactId","prevState","console","log","localContacts","localStorage","getItem","parseContacts","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cb1b772.chunk.js","sourcesContent":["import React from 'react';\nimport './Section.css';\nimport PropTypes from 'prop-types';\n\nfunction Section({ title, children }) {\n  return (\n    <div className=\"task__section\">\n      {title && <h2>{title}</h2>}\n      {children}\n    </div>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React, { Component } from 'react';\nimport PropsType from 'prop-types';\nimport { v4 as uuid } from 'uuid';\nimport './ContactForm.css';\n\nclass ContactForm extends Component {\n  nameId = uuid();\n  numberId = uuid();\n\n  state = {\n    name: '',\n    number: '',\n  };\n\n  formChange = event => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  formSubmit = event => {\n    event.preventDefault();\n    const contact = {\n      id: uuid(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.props.onSubmit(contact);\n    this.formReset();\n  };\n\n  formReset = () => {\n    this.setState({ name: '' });\n    this.setState({ number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form className=\"contacts__form\" onSubmit={this.formSubmit}>\n        <label className=\"contcts__form-label\" htmlFor={this.nameId}>\n          Name\n          <input\n            className=\"contcts__form-input\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={this.formChange}\n            id={this.nameId}\n          />\n        </label>\n        <label className=\"contcts__form-label\" htmlFor={this.numberId}>\n          Number\n          <input\n            className=\"contcts__form-input\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={this.formChange}\n            id={this.numberId}\n          />\n        </label>\n        <button className=\"contacts__form-button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.PropsType = {\n  onSubmit: PropsType.func.isRequired,\n};\n\nexport default ContactForm;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Filter.css';\n\nclass Filter extends Component {\n  render() {\n    return (\n      <div>\n        <h3 className=\"filter__header\">Find contacts by name :</h3>\n        <input\n          type=\"text\"\n          name=\"filter\"\n          value={this.props.value}\n          onChange={this.props.onChange}\n          className=\"filter__input\"\n        />\n      </div>\n    );\n  }\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport './ContactListItem.css';\n\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => {\n  return (\n    <li className=\"contact__list-item\">\n      <div>\n        {name}: {number}\n      </div>\n      <button\n        className=\"contact__list-delete-button\"\n        type=\"submit\"\n        onClick={() => onDeleteContact(id)}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.prototype = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import ContactListItem from './ContactListItem';\nimport PropTypes from 'prop-types';\nimport './ContactsList.css';\n\nconst ContactsList = ({ findContact, onDeleteContact }) => {\n  return (\n    <ul className=\"contact__list\">\n      {findContact().map(({ id, name, number }) => {\n        return (\n          <ContactListItem\n            className=\"contacts__list-item\"\n            key={id}\n            id={id}\n            name={name}\n            number={number}\n            onDeleteContact={onDeleteContact}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nContactsList.prototype = {\n  findContact: PropTypes.func.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import React, { Component } from \"react\";\nimport Section from \"./components/Section\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactsList from \"./components/ContactsList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    console.log(`MOUNT`);\n    const localContacts = localStorage.getItem(\"contacts\");\n    const parseContacts = JSON.parse(localContacts);\n    if (parseContacts) {\n      this.setState({ contacts: parseContacts });\n    }\n  }\n  componentDidUpdate(prevProps, prevState) {\n    console.log(`UPDATE`);\n    if (prevState.contacts !== this.state.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  getChange = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  addContact = (contact) => {\n    if (!this.checkContact(contact.name)) {\n      this.setState(({ contacts }) => ({\n        contacts: [contact, ...contacts],\n      }));\n    } else {\n      alert(`${contact.name} is already in contacts`);\n    }\n  };\n\n  checkContact = (name) => {\n    return this.state.contacts.find((contact) => {\n      return contact.name.toLocaleLowerCase() === name.toLocaleLowerCase();\n    });\n  };\n\n  findContact = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLocaleLowerCase();\n\n    if (filter.length) {\n      return contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(normalizedFilter)\n      );\n    } else {\n      return contacts;\n    }\n  };\n\n  deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"header__main\">React HW 003 Phonebook</h1>\n        <Section title=\"Phonebook\">\n          <ContactForm onSubmit={this.addContact} />\n        </Section>\n        <Section title=\"Contacts\">\n          <Filter value={this.state.filter} onChange={this.getChange} />\n          <ContactsList\n            findContact={this.findContact}\n            onDeleteContact={this.deleteContact}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}